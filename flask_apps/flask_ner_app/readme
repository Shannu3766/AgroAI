REM --- Phase 1: Setup Environment Variables & GCP Config (No Changes Here) ---
set PROJECT_ID=axiomatic-grove-403514
set REGION=us-central1
set AR_REPOSITORY_NAME=ner-app-repo
set IMAGE_NAME=ner-flask-app
set IMAGE_TAG=latest
set SERVICE_NAME=ner-flask-service
set IMAGE_URI=%REGION%-docker.pkg.dev/%PROJECT_ID%/%AR_REPOSITORY_NAME%/%IMAGE_NAME%:%IMAGE_TAG%

REM --- Login and set project (if not already done in your session) ---
gcloud auth login
gcloud auth application-default login
gcloud config set project %PROJECT_ID%

REM --- Phase 2: Create Artifact Registry Repository (if it doesn't exist - run once) ---
gcloud artifacts repositories create %AR_REPOSITORY_NAME% ^
    --repository-format=docker ^
    --location=%REGION% ^
    --description="Docker repository for NER Flask App"

REM --- Phase 3: Build and Push Image using GCP Cloud Build ---
REM Ensure you are in the directory containing your Dockerfile and application code
REM This command sends your current directory's content to Cloud Build,
REM builds the Docker image there, and pushes it to the specified IMAGE_URI.
gcloud builds submit . --tag %IMAGE_URI%

REM --- Phase 4: Deploy to Cloud Run (No Changes Here) ---
REM This command now uses the image built by Cloud Build and stored in Artifact Registry.
gcloud run deploy %SERVICE_NAME% ^
    --image="%IMAGE_URI%" ^
    --platform=managed ^
    --region=%REGION% ^
    --allow-unauthenticated ^
    --port=8080 ^
    --memory=16Gi ^
    --cpu=1 ^
    --timeout=600 ^
    --concurrency=10 ^
    --cpu-boost ^
    --min-instances=0





#update


REM --- Phase 1: Setup Environment Variables & GCP Config (Ensure these are set correctly) ---
REM (These should be the same as your initial deployment, unless you are changing regions/projects/names)
set PROJECT_ID=axiomatic-grove-403514
set REGION=us-central1
set AR_REPOSITORY_NAME=ner-app-repo
set IMAGE_NAME=ner-flask-app
set IMAGE_TAG=latest  REM Or a new version tag like v1.1, commit-sha, etc.
set SERVICE_NAME=ner-flask-service
set IMAGE_URI=%REGION%-docker.pkg.dev/%PROJECT_ID%/%AR_REPOSITORY_NAME%/%IMAGE_NAME%:%IMAGE_TAG%

REM --- Login and set project (if not already done in your current CMD session) ---
gcloud auth login
gcloud auth application-default login
gcloud config set project %PROJECT_ID%

REM --- Phase 2: Build and Push the NEW Image using GCP Cloud Build ---
REM Ensure you are in the directory containing your UPDATED Dockerfile and application code.
REM This command sends your current directory's content to Cloud Build,
REM builds the new Docker image, and pushes it to the specified IMAGE_URI.
REM If IMAGE_TAG is 'latest', it will update the 'latest' tag in Artifact Registry.
gcloud builds submit . --tag %IMAGE_URI%

REM --- Phase 3: Update the Cloud Run Service to use the NEW Image ---
REM This command tells Cloud Run to create a new revision for your service using the updated image.
REM Other parameters (port, memory, etc.) will remain the same unless you explicitly change them here.
gcloud run deploy %SERVICE_NAME% ^
    --image="%IMAGE_URI%" ^
    --platform=managed ^
    --region=%REGION% ^
    --allow-unauthenticated ^
    --port=8080 ^
    --memory=16Gi ^
    --cpu=1 ^
    --timeout=600 ^
    --concurrency=10 ^
    --cpu-boost ^
    --min-instances=0